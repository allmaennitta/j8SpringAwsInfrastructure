package de.allmaennitta.java.aws.infrastructure.config.utils;

import static de.allmaennitta.java.aws.infrastructure.config.tracking.TrackingService.REQUEST_ID_PATTERN;
import static de.allmaennitta.java.aws.infrastructure.config.tracking.TrackingService.SESSION_ID_PATTERN;
import static org.assertj.core.api.Assertions.assertThat;

import de.allmaennitta.java.aws.infrastructure.config.tracking.TrackingServiceTest;
import java.util.Arrays;
import java.util.List;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.test.context.junit4.SpringRunner;

@RunWith(SpringRunner.class)
public class UtilsTest {

  private static final Logger LOG = LoggerFactory.getLogger(TrackingServiceTest.class);

  @Test
  public void GIVEN_aKnownString_EXPECT_toBeSameAfterZippingAndUnzipping() {
    String message = "This is a testmessage 123 with Üü, Öö, Ää";
    System.out.println("Message: " + message);
    String zipped = Utils.zipString(message);
    assertThat(zipped).isNotEqualTo(message);
    String unzipped = Utils.unzipString(zipped);
    System.out.println("Unzipped: " + unzipped);
    assertThat(unzipped).isEqualTo(message);
  }

  @Test
  public void GIVEN_aZippedResultJSON_EXPECT_toBeUnzippedToPlainJSON() {
    List<String> zippedBodies = Arrays.asList(
        "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"
    );

    for (String bodyZ : zippedBodies) {
      LOG.info("BodyZ: " + bodyZ);
      String unzipped = Utils.unzipString(bodyZ);
      LOG.info("Unzipped: " + unzipped);
      assertThat(unzipped).contains("query");
    }
  }


  @Test
  public void GIVEN_aResultPayload_EXPECT_toBeAbleToTrack_SessionId_and_RequestId() {

    String payload = "{\"query\":{\"origin\":\"ABC\",\"destination\":\"XYZ\",\"depDate\":\"2018-05-11\",\"retDate\":\"2018-05-20\",\"currency\":\"EUR\",\"sessionId\":\"session1\",\"requestId\":\"req1\",\"buckets\":[\"Bucket1\",\"Bucket2\"],\"source\":\"YET_UNKNOWN\",\"adult\":2,\"child\":1,\"infant\":1,\"poolRequestNr\":1,\"existingPools\":5},\"bagAllowances\":[],\"errorMessage\":\"\"}";
    assertThat(Utils.getId(REQUEST_ID_PATTERN, payload)).isEqualTo("req1");
    assertThat(Utils.getId(SESSION_ID_PATTERN, payload)).isEqualTo("session1");
  }

  @Test
  public void GIVEN_aNonMatchingPayload_EXPECT_NotExtractable() {

    String payload = "";
    assertThat(Utils.getId(REQUEST_ID_PATTERN, payload)).isEqualTo("NOT_EXTRACTABLE");
    assertThat(Utils.getId(SESSION_ID_PATTERN, payload)).isEqualTo("NOT_EXTRACTABLE");
  }
}